---
title: "Simulazione elezioni politiche"
author: "Luca Fornasari"
date: "`r Sys.Date()`"
format: 
  html:
    self-contained: true
---

Questo report serve a verificare l'attendibilità della funzione "scrutinio"
usata dal simulatore:
calcola gli eletti alla Camera dei Deputati e al Senato della Repubblica
a partire dalle candidature (ottenute da [Elezioni trasparenti](https://dait.interno.gov.it/elezioni/trasparenza/elezioni-politiche-2022))
e dai risultati (ricavati attraverso un progetto di [onData](https://github.com/ondata/elezioni-politiche-2022)).

Avverto che ho fatto questa simulazione per curiosità e non per lavoro, e che
potrebbero essermi sfuggiti degli errori nel processo di
simulazione, i risultati vanno dunque presi senza alcuna garanzia di
accuratezza.

Segnalazioni, richieste e suggerimenti a <fornaeffe@gmail.com> o sul repository
<https://github.com/fornaeffe/elezioni>.


```{r setup}
#| include: false
knitr::opts_chunk$set(echo = FALSE)

library(data.table)
library(stringr)
library(readxl)
library(parallel)
library(kableExtra)
```

```{r collegi}
#| include: false
#| cache: true

#### Importazione dati ####

##### Base dati #####

base_dati <- read.csv2(
  "dati/BaseDati_Proposta_Commissione.csv",
  fileEncoding = "utf-8",

# TO DO: verificare che le righe seguenti siano davvero utili
  # colClasses = c(
  #   CIRCOCAM_20_DEN = "factor",
  #   CP20_DEN = "factor",
  #   CU20_DEN = "factor"
  # ),

  na.strings = ""
)

base_dati$SP20_DEN[base_dati$DEN_REG20 == "Trentino-Alto Adige"] <- 
  "Trentino-Alto Adige/Südtirol - P01"

base_dati$DEN_REG20[base_dati$DEN_REG20 == "Trentino-Alto Adige"] <- 
  "Trentino-Alto Adige/Südtirol"

base_dati$CIRCOCAM_20_DEN <- 
  str_remove(base_dati$CIRCOCAM_20_DEN, "/Vallée d'Aoste")
base_dati$SU20_DEN <- 
  str_remove(base_dati$SU20_DEN, "/Vallée d'Aoste")
base_dati$CU20_DEN <- 
  str_remove(base_dati$CU20_DEN, "/Vallée d'Aoste")

#Trasformo in maiuscolo per compatibilità con i dati dei candidati
base_dati$DEN_REG20 <- toupper(base_dati$DEN_REG20)
base_dati$CIRCOCAM_20_DEN <- toupper(base_dati$CIRCOCAM_20_DEN)
base_dati$CP20_DEN <- toupper(base_dati$CP20_DEN)
base_dati$SP20_DEN <- toupper(base_dati$SP20_DEN)
base_dati$CU20_DEN <- toupper(base_dati$CU20_DEN)
base_dati$SU20_DEN <- toupper(base_dati$SU20_DEN)


prepara_collegi <- function(ramo) {
  if (ramo == "camera") {
    colonna_circ <- base_dati$CIRCOCAM_20_DEN
    colonna_pluri <- base_dati$CP20_DEN
    colonna_uni <- base_dati$CU20_DEN
  }
  
  if (ramo == "senato") {
    colonna_circ <- base_dati$DEN_REG20
    colonna_pluri <- base_dati$SP20_DEN
    colonna_uni <- base_dati$SU20_DEN
  }
  
  dati <- list()
  
  # Estraggo le circoscrizioni
  dati$circoscrizioni <- aggregate(
    POP_2011 ~ colonna_circ,
    base_dati,
    sum
  )
  
  # Estraggo i collegi plurinominali
  dati$collegi_pluri <- aggregate(
    POP_2011 ~ colonna_circ + colonna_pluri,
    base_dati,
    sum
  )
  
  dati$collegi_uni <- aggregate(
    POP_2011 ~ colonna_circ + colonna_pluri + colonna_uni,
    base_dati,
    sum
  )
  
  
  ##### Rinomino le colonne ####
  names(dati$circoscrizioni)[1] <- "CIRCOSCRIZIONE"
  names(dati$collegi_pluri)[1] <- "CIRCOSCRIZIONE"
  names(dati$collegi_pluri)[2] <- "COLLEGIOPLURINOMINALE"
  names(dati$collegi_uni)[1] <- "CIRCOSCRIZIONE"
  names(dati$collegi_uni)[2] <- "COLLEGIOPLURINOMINALE"
  names(dati$collegi_uni)[3] <- "COLLEGIOUNINOMINALE"
  
  # Carico i collegi
  dati$collegi_pluri <- merge(
    dati$collegi_pluri,
    read_xlsx("dati/2022/collegi.xlsx", paste0(ramo, "_pluri"))
  )
  
  dati
}

# Preparo le liste
camera <- prepara_collegi("camera")
senato <- prepara_collegi("senato")


```


```{r dati}
#| include: false
#| cache: true


# Importo liste_naz

liste_naz <- read_xlsx("dati/2022/liste_a_posteriori.xlsx", "liste")

liste_naz$CL <- ifelse(
  is.na(liste_naz$COALIZIONE), 
  liste_naz$ABBREV, 
  liste_naz$COALIZIONE
)

carica_dati <- function(ramo) {
  
  anagrafica_comuni <- read.csv(
    paste0(
      "dati/2022/",
      ramo,
      "-italia-comune_anagrafica.csv"
    )
  )
  
  anagrafica_comuni$desc_cl_uni <- str_remove(
    anagrafica_comuni$desc_cl_uni,
    " \\(.*"
  )
  
  anagrafica_per_merge <- anagrafica_comuni[, c(
    "codice",
    "desc_cl_uni",
    "desc_cl_plu",
    "desc_circ"
  )]
  
  names(anagrafica_per_merge) <- c(
    "codice",
    "COLLEGIOUNINOMINALE",
    "COLLEGIOPLURINOMINALE",
    "CIRCOSCRIZIONE"
  )
  
  liste_comune <- read.csv(
    paste0(
      "dati/2022/",
      ramo,
      "-italia-comune.csv"
    )
  )
  
  liste_comune <- merge(
    liste_comune,
    anagrafica_per_merge
  )
  
  names(liste_comune)[names(liste_comune) == "desc_lis"] <- "LISTA"
  names(liste_comune)[names(liste_comune) == "voti"] <- "VOTI_LISTA"
  
  setdiff(liste_comune$LISTA, liste_naz$LISTA)
  
  # Aggiungo le colonne "abbrev", "cl"
  liste_comune <- merge(
    liste_comune,
    liste_naz[, c("LISTA", "ABBREV", "CL")]
  )
  
  cl_comune <- aggregate(
    voti_solo_can ~ CL + codice + COLLEGIOUNINOMINALE,
    liste_comune,
    unique
  )
  
  
  liste_uni <- read.csv(
    paste0(
      "dati/2022/",
      toupper(ramo),
      "_ITALIA_20220925_uni.csv"
    )
  )
  candidati_pluri <- read.csv(
    paste0(
      "dati/2022/",
      toupper(ramo),
      "_ITALIA_20220925_pluri.csv"
    )
  )
  
  names(liste_uni)[2:3] <- c("COLLEGIOUNINOMINALE", "LISTA")
  names(candidati_pluri)[2:3] <- c("COLLEGIOPLURINOMINALE", "LISTA")
  
  liste_uni$CANDIDATO <- trimws(liste_uni$CANDIDATO)
  candidati_pluri$CANDIDATO <- trimws(candidati_pluri$CANDIDATO)
  
  
  
  # Correggo la scrittura del SÜDTIROL
  liste_uni$CIRCOSCRIZIONE <- 
    str_replace(liste_uni$CIRCOSCRIZIONE, "S\\?DTIROL", "SÜDTIROL")
  liste_uni$COLLEGIOUNINOMINALE <- 
    str_replace(liste_uni$COLLEGIOUNINOMINALE, "S\\?DTIROL", "SÜDTIROL")
  liste_uni$LISTA <- 
    str_replace(liste_uni$LISTA, "S\\?DTIROL", "SÜDTIROL")
  candidati_pluri$CIRCOSCRIZIONE <- 
    str_replace(candidati_pluri$CIRCOSCRIZIONE, "S\\?DTIROL", "SÜDTIROL")
  candidati_pluri$COLLEGIOPLURINOMINALE <- 
    str_replace(candidati_pluri$COLLEGIOPLURINOMINALE, "S\\?DTIROL", "SÜDTIROL")
  candidati_pluri$LISTA <- 
    str_replace(candidati_pluri$LISTA, "S\\?DTIROL", "SÜDTIROL")
  
  # Correggo la circoscrizione "ITALIA"
  sost_circ <- function(stringa) {
    substr(stringa, 1, str_length(stringa) - 6)
  }
  
  liste_uni$CIRCOSCRIZIONE[liste_uni$CIRCOSCRIZIONE == "ITALIA"] <- 
    sapply(
      liste_uni$COLLEGIOUNINOMINALE[liste_uni$CIRCOSCRIZIONE == "ITALIA"],
      sost_circ
    )
  
  # Aggiungo i numeri dei candidati
  candidati_pluri$NUMERO <- ave(
    seq_along(candidati_pluri$CANDIDATO),
    paste(candidati_pluri$COLLEGIOPLURINOMINALE, candidati_pluri$LISTA),
    FUN = seq_along
  )
  
  setdiff(liste_uni$CIRCOSCRIZIONE, liste_comune$CIRCOSCRIZIONE)
  setdiff(liste_comune$CIRCOSCRIZIONE, liste_uni$CIRCOSCRIZIONE)
  
  setdiff(liste_uni$COLLEGIOUNINOMINALE, liste_comune$COLLEGIOUNINOMINALE)
  setdiff(liste_comune$COLLEGIOUNINOMINALE, liste_uni$COLLEGIOUNINOMINALE)
  
  setdiff(liste_uni$LISTA, liste_comune$LISTA)
  setdiff(liste_comune$LISTA, liste_uni$LISTA)
  
  # Aggiungo la colonna "collegio plurinominale"
  liste_uni <- merge(
    liste_uni,
    unique(anagrafica_per_merge[, 2:3])
  )
  
  # Aggiungo le colonne "abbrev", "cl", "minoranza"
  liste_uni <- merge(
    liste_uni,
    liste_naz[, c("LISTA", "ABBREV", "CL", "MINORANZA")]
  )
  
  liste_uni$CAND_MINORANZA <- liste_uni$MINORANZA
  
  # Aggiungo la colonna CL e ABBREV
  candidati_pluri <- merge(
    candidati_pluri,
    liste_naz[, c("LISTA", "CL", "ABBREV")]
  )
  
  # Creo il dataframe candidati_uni
  candidati_uni <- unique(
    liste_uni[
      ,
      c(
        "CIRCOSCRIZIONE",
        "COLLEGIOPLURINOMINALE",
        "COLLEGIOUNINOMINALE",
        "CL",
        "CANDIDATO"
      )
    ]
  )
  
  ## Controllo omonimie
  
  # Omonimie uni
  omonimi_uni <- which(duplicated(candidati_uni$CANDIDATO))
  
  for (o in omonimi_uni) {
    vecchio_nome <- candidati_uni$CANDIDATO[o]
    cl <- candidati_uni$CL[o]
    nuovo_nome <- paste(vecchio_nome, cl, sep = " - ")
    
    candidati_uni$CANDIDATO[o] <- nuovo_nome
    candidati_pluri$CANDIDATO[
      candidati_pluri$CANDIDATO == vecchio_nome &
        candidati_pluri$CL == cl
    ] <- nuovo_nome
    liste_uni$CANDIDATO[
      liste_uni$CANDIDATO == vecchio_nome &
        liste_uni$CL == cl
    ] <- nuovo_nome
    
    message("Risolta omonimia uni: ", nuovo_nome)
  }
  
  # Omonimie pluri
  candidati_pluri_unico <- unique(
    candidati_pluri[, c("CANDIDATO", "ABBREV", "CL")]
  )
  omonimi_pluri <- which(duplicated(candidati_pluri_unico$CANDIDATO))
  
  for (o in omonimi_pluri) {
    vecchio_nome <- candidati_pluri_unico$CANDIDATO[o]
    abbrev <- candidati_pluri_unico$ABBREV[o]
    cl <- candidati_pluri_unico$CL[o]
    nuovo_nome <- paste(vecchio_nome, abbrev, sep = " - ")
    
    if (
      sum(
        candidati_uni$CANDIDATO == vecchio_nome & candidati_uni$CL == cl
      ) > 0 &
      sum(
        duplicated(
          candidati_pluri_unico$CL[
            candidati_pluri_unico$CANDIDATO == vecchio_nome
          ]
        )
      ) > 0
    ) {
      warning("C'è un candidato uninominale e due diversi candidati ",
              "plurinominali della coalizione ", 
              cl,
              " chiamati ",
              vecchio_nome,
              ", assegno il candidato uninominale al secondo dei due.")
    }
    
    candidati_pluri$CANDIDATO[
      candidati_pluri$CANDIDATO == vecchio_nome &
        candidati_pluri$ABBREV == abbrev
    ] <- nuovo_nome
    
    candidati_uni$CANDIDATO[
      candidati_uni$CANDIDATO == vecchio_nome &
        candidati_uni$CL == cl
    ] <- nuovo_nome
    
    liste_uni$CANDIDATO[
      liste_uni$CANDIDATO == vecchio_nome &
        liste_uni$CL == cl
    ] <- nuovo_nome
    
    message("Risolta omonimia pluri: ", nuovo_nome)
  }
  
  # Omonimie incrociate
  candidati_pluri_unico <- unique(
    candidati_pluri[, c("CANDIDATO", "ABBREV", "CL")]
  )
  candidati_tutti <- unique(rbind(
    candidati_uni[, c("CANDIDATO", "CL")],
    candidati_pluri_unico[, c("CANDIDATO", "CL")]
  ))
  omonimi_incrociati <- which(duplicated(candidati_tutti$CANDIDATO))
  
  for (o in omonimi_incrociati) {
    vecchio_nome <- candidati_tutti$CANDIDATO[o]
    cl <- candidati_tutti$CL[o]
    nuovo_nome <- paste(vecchio_nome, cl, sep = " - ")
    
    candidati_pluri$CANDIDATO[
      candidati_pluri$CANDIDATO == vecchio_nome &
        candidati_pluri$CL == cl
    ] <- nuovo_nome
    
    candidati_uni$CANDIDATO[
      candidati_uni$CANDIDATO == vecchio_nome &
        candidati_uni$CL == cl
    ] <- nuovo_nome
    
    liste_uni$CANDIDATO[
      liste_uni$CANDIDATO == vecchio_nome &
        liste_uni$CL == cl
    ] <- nuovo_nome
    
    message("Risolta omonimia incrociata: ", nuovo_nome)
  }
  
  cl_uni <- aggregate(
    voti_solo_can ~ CL + COLLEGIOUNINOMINALE,
    cl_comune,
    sum
  )
  
  candidati_uni <- merge(
    candidati_uni,
    cl_uni,
    all.x = TRUE
  )
  
  candidati_uni$voti_solo_can[is.na(candidati_uni$voti_solo_can)] <- 0
  
  liste_uni <- merge(
    liste_uni,
    aggregate(
      VOTI_LISTA ~ LISTA + COLLEGIOUNINOMINALE,
      liste_comune,
      sum
    ),
    all.x = TRUE
  )
  
  liste_uni$VOTI_LISTA[is.na(liste_uni$VOTI_LISTA)] <- 0
  
  candidati_uni <- merge(
    candidati_uni,
    aggregate(
      VOTI_LISTA ~ CL + COLLEGIOUNINOMINALE,
      liste_uni,
      sum
    )
  )
  
  candidati_uni$VOTI_CANDIDATO <- 
    candidati_uni$VOTI_LISTA + candidati_uni$voti_solo_can
  
  candidati_uni$DATA_NASCITA <- as.POSIXct("1990-01-01")
  
  list(
    liste_uni = liste_uni,
    candidati_uni = candidati_uni, 
    candidati_pluri = candidati_pluri
  )
}

camera <- c(camera, carica_dati("camera"))

# Check per controllare che i nomi corrispondano
setdiff(camera$candidati_uni$CIRCOSCRIZIONE, base_dati$CIRCOCAM_20_DEN)
setdiff(base_dati$CIRCOCAM_20_DEN, camera$candidati_uni$CIRCOSCRIZIONE)

setdiff(camera$candidati_pluri$CIRCOSCRIZIONE, base_dati$CIRCOCAM_20_DEN)
setdiff(base_dati$CIRCOCAM_20_DEN, camera$candidati_pluri$CIRCOSCRIZIONE)

setdiff(senato$candidati_uni$CIRCOSCRIZIONE, base_dati$DEN_REG20)
setdiff(base_dati$DEN_REG20, senato$candidati_uni$CIRCOSCRIZIONE)

setdiff(senato$candidati_pluri$CIRCOSCRIZIONE, base_dati$DEN_REG20)
setdiff(base_dati$DEN_REG20, senato$candidati_pluri$CIRCOSCRIZIONE)



setdiff(camera$candidati_uni$COLLEGIOUNINOMINALE, base_dati$CU20_DEN)
setdiff(base_dati$CU20_DEN, camera$candidati_uni$COLLEGIOUNINOMINALE)

setdiff(camera$candidati_pluri$COLLEGIOPLURINOMINALE, base_dati$CP20_DEN)
setdiff(base_dati$CP20_DEN, camera$candidati_pluri$COLLEGIOPLURINOMINALE)

setdiff(senato$candidati_uni$COLLEGIOUNINOMINALE, base_dati$SU20_DEN)
setdiff(base_dati$SU20_DEN, senato$candidati_uni$COLLEGIOUNINOMINALE)

setdiff(senato$candidati_pluri$COLLEGIOPLURINOMINALE, base_dati$SP20_DEN)
setdiff(base_dati$SP20_DEN, senato$candidati_pluri$COLLEGIOPLURINOMINALE)


```



```{r scrutinio}
#| include: false
#| cache: true

source("scrutinio.R")

esegui_scrutinio <- function(ramo) {
  dati <- get(ramo)
  
  scrutinio <- Scrutinio(
    ramo,
    
    dati$liste_uni[, c(
      "CIRCOSCRIZIONE",
      "COLLEGIOPLURINOMINALE",
      "COLLEGIOUNINOMINALE",
      "CANDIDATO",
      "CAND_MINORANZA",
      "LISTA",
      "MINORANZA",
      "VOTI_LISTA"
    )],
    liste_naz[, c(
      "LISTA",
      "COALIZIONE",
      "MINORANZA"
    )],
    dati$candidati_uni[, c(
      "CIRCOSCRIZIONE",
      "COLLEGIOPLURINOMINALE",
      "COLLEGIOUNINOMINALE",
      "CANDIDATO",
      "DATA_NASCITA",
      "VOTI_CANDIDATO"
    )],
    dati$candidati_pluri[, c(
      "CIRCOSCRIZIONE",
      "COLLEGIOPLURINOMINALE",
      "LISTA",
      "NUMERO",
      "CANDIDATO"
    )],
    dati$collegi_pluri[, c(
      "CIRCOSCRIZIONE",
      "COLLEGIOPLURINOMINALE",
      "SEGGI"
    )],
    ifelse(ramo == "camera", 392, 196)
  )
  
  write.csv2(
    scrutinio$candidati_uni, 
    file = paste0("_output/", ramo, "_candidati_uni.csv")
  )
  
  write.csv2(
    scrutinio$candidati_pluri, 
    file = paste0("_output/", ramo, "_candidati_pluri.csv")
  )
  
  # DA COMPLETARE!
  
}

esegui_scrutinio("camera")

# DA COMPLETARE!


