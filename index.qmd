---
title: "Simulazione elezioni politiche"
author: "Luca Fornasari"
date: "`r Sys.Date()`"
format: html
---

```{r librerie}

library(data.table)
library(stringr)
library(readxl)
```

```{r distribuzione voti}
#| include: false
#| cache: true

#### Importazione dati ####

##### Base dati #####

base_dati <- read.csv2(
  "dati/BaseDati_Proposta_Commissione.csv",
  fileEncoding = "utf-8",

# TO DO: verificare che le righe seguenti siano davvero utili
  # colClasses = c(
  #   CIRCOCAM_20_DEN = "factor",
  #   CP20_DEN = "factor",
  #   CU20_DEN = "factor"
  # ),

  na.strings = ""
)

base_dati$SP20_DEN[base_dati$DEN_REG20 == "Trentino-Alto Adige"] <- 
  "Trentino-Alto Adige/Südtirol - P01"

base_dati$DEN_REG20[base_dati$DEN_REG20 == "Trentino-Alto Adige"] <- 
  "Trentino-Alto Adige/Südtirol"

base_dati$CIRCOCAM_20_DEN <- 
  str_remove(base_dati$CIRCOCAM_20_DEN, "/Vallée d'Aoste")
base_dati$SU20_DEN <- 
  str_remove(base_dati$SU20_DEN, "/Vallée d'Aoste")
base_dati$CU20_DEN <- 
  str_remove(base_dati$CU20_DEN, "/Vallée d'Aoste")

#Trasformo in maiuscolo per compatibilità con i dati dei candidati
base_dati$DEN_REG20 <- toupper(base_dati$DEN_REG20)
base_dati$CIRCOCAM_20_DEN <- toupper(base_dati$CIRCOCAM_20_DEN)
base_dati$CP20_DEN <- toupper(base_dati$CP20_DEN)
base_dati$SP20_DEN <- toupper(base_dati$SP20_DEN)
base_dati$CU20_DEN <- toupper(base_dati$CU20_DEN)
base_dati$SU20_DEN <- toupper(base_dati$SU20_DEN)


names(base_dati)[names(base_dati) == "DEN_PRO_CM20"] <- "PROVINCIA"
names(base_dati)[names(base_dati) == "DEN_COM20"] <- "COMUNE"

base_dati$PROVINCIA <- toupper(base_dati$PROVINCIA)
base_dati$COMUNE <- toupper(base_dati$COMUNE)

province <- aggregate(
  POP_2011 ~ PROVINCIA,
  base_dati,
  sum
)


comuni <- unique(base_dati[, c("PROVINCIA", "COMUNE")])

##### Politiche #####

camera_2018 <- read.csv2(
  "dati/2018/camera-20180304_2.txt",
  fileEncoding = "utf-8"
)

camera_2018$PROV_TEMP <- str_remove(camera_2018$COLLEGIOUNINOMINALE, "\\A[0-9]{2} (- )?")
camera_2018$PROV_TEMP <- str_remove(camera_2018$PROV_TEMP, " - .*\\Z")
camera_2018$PROV_TEMP <- str_remove(camera_2018$PROV_TEMP, " AREA STATISTICA .*\\Z")

camera_2018 <- merge(
  camera_2018,
  comuni,
  by.x = "PROV_TEMP",
  by.y = "COMUNE",
  all.x = TRUE
)

camera_2018$PROVINCIA[camera_2018$PROV_TEMP == ""] <- "AOSTA"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "BOLZANO/BOZEN"] <- "BOLZANO"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "BRESSANONE/BRIXEN"] <- "BOLZANO"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "CANT+"] <- "COMO"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "CORIGLIANO CALABRO"] <- "COSENZA"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "FORL¦"] <- "FORLI'-CESENA"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "MERANO/MERAN"] <- "BOLZANO"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "NARDÊ"] <- "LECCE"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "PATERNÊ"] <- "CATANIA"
camera_2018$PROVINCIA[camera_2018$PROV_TEMP == "SAN DONA' DI PIAVE"] <- "VENEZIA"

# Checks
# TO DO: trasformare in un controllo che innesca un errore
setdiff(unique(camera_2018$PROVINCIA), province$PROVINCIA)
sum(is.na(camera_2018$PROVINCIA))

##### Amministrative #####

lista_files <- list.files("dati/eur_reg")

lista_dataframes <- lapply(
  paste0("dati/eur_reg/", lista_files),
  read.csv2,
  fileEncoding = "utf-8"
)

lista_dataframes <- mapply(
  function(df, nome_file) {
    names(df) <- toupper(names(df))
    if (is.null(df$COGNOME)) df$COGNOME <- NA
    if (is.null(df$NOME)) df$NOME <- NA
    names(df)[names(df) == "VOTILISTA"] <- "VOTI_LISTA"
    df <- df[,c(
      "REGIONE",
      "PROVINCIA",
      "COMUNE",
      "ELETTORI",
      "VOTANTI",
      "COGNOME",
      "NOME",
      "LISTA",
      "VOTI_LISTA"
    )]
    df$ELEZIONE <- nome_file
    df
  },
  df = lista_dataframes,
  nome_file = lista_files,
  SIMPLIFY = FALSE
)

amministrative <- rbindlist(lista_dataframes)
lista_dataframes <- NULL

amministrative$PROVINCIA[amministrative$PROVINCIA == "REGGIO NELL' EMILIA"] <- "REGGIO NELL'EMILIA"
amministrative$PROVINCIA[amministrative$PROVINCIA == "MASSA-CARRARA"] <- "MASSA CARRARA"

# Checks
# TO DO: trasformare in un controllo che innesca un errore
setdiff(unique(amministrative$PROVINCIA), province$PROVINCIA)

##### Unione camera e amministrative #####

camera_2018$REGIONE <- str_remove(camera_2018$CIRCOSCRIZIONE, " [0-9]\\Z")
camera_2018$REGIONE <- str_remove(camera_2018$REGIONE, "/.*")
camera_2018$ELEZIONE <- "camera_2018"

###### Calcolo astensione ######

camera_2018_astensione <- aggregate(
  VOTI_LISTA ~ 
    CIRCOSCRIZIONE +
    COLLEGIOPLURINOMINALE +
    COLLEGIOUNINOMINALE +
    REGIONE +
    PROVINCIA +
    COMUNE +
    ELETTORI +
    VOTANTI + 
    ELEZIONE,
  camera_2018,
  sum
)

camera_2018_astensione$LISTA <- "astensione"
camera_2018_astensione$COGNOME <- NA
camera_2018_astensione$NOME <- NA
camera_2018_astensione$VOTI_LISTA <- 
  camera_2018_astensione$ELETTORI - camera_2018_astensione$VOTI_LISTA

amministrative_astensione <- aggregate(
  VOTI_LISTA ~ 
    REGIONE +
    PROVINCIA +
    COMUNE +
    ELETTORI +
    VOTANTI +
    ELEZIONE,
  amministrative,
  sum
)

amministrative_astensione$LISTA <- "astensione"
amministrative_astensione$COGNOME <- NA
amministrative_astensione$NOME <- NA
amministrative_astensione$VOTI_LISTA <- 
  amministrative_astensione$ELETTORI - amministrative_astensione$VOTI_LISTA

dati_precedenti <- rbind(
  amministrative,
  amministrative_astensione,
  camera_2018[, c(
    "REGIONE",
    "PROVINCIA",
    "COMUNE",
    "ELETTORI",
    "VOTANTI",
    "COGNOME",
    "NOME",
    "LISTA",
    "VOTI_LISTA",
    "ELEZIONE"
  )],
  camera_2018_astensione[, c(
    "REGIONE",
    "PROVINCIA",
    "COMUNE",
    "ELETTORI",
    "VOTANTI",
    "COGNOME",
    "NOME",
    "LISTA",
    "VOTI_LISTA",
    "ELEZIONE"
  )]
)
amministrative <- NULL
camera_2018 <- NULL


# Questo è servito per esportare i nomi delle liste
write.csv2(
  dati_precedenti[!duplicated(dati_precedenti$LISTA), ],
  "_output/liste_precedenti_elezioni.csv",
  fileEncoding = "utf-8"
)

##### Corrispondenza liste - aree #####

liste <- read_xlsx("dati/liste_precedenti_elezioni.xlsx", "liste")
liste <- liste[
  !duplicated(liste$LISTA) & !is.na(liste$LISTA) & !is.na(liste$AREA)
  , c("LISTA", "AREA")]


#### Calcolo distribuzione spaziale elettori di area ####

dati_precedenti$AREA <- 
  factor(dati_precedenti$LISTA, levels = liste$LISTA, labels = liste$AREA)

prov_area <- aggregate(
  VOTI_LISTA ~ PROVINCIA + AREA,
  dati_precedenti,
  sum
)

prov_area <- merge(
  prov_area,
  aggregate(
    VOTI_LISTA ~ PROVINCIA,
    prov_area,
    sum
  ),
  by = "PROVINCIA",
  suffixes = c("", "_TOT")
)

prov_area$PERCENTUALE_STORICA <- prov_area$VOTI_LISTA / prov_area$VOTI_LISTA_TOT

prov_area <- merge(
  prov_area,
  province
)

prov_area$POP_AREA <- prov_area$PERCENTUALE_STORICA * prov_area$POP_2011

aree <- aggregate(
  POP_AREA ~ AREA,
  prov_area,
  sum
)

prov_area <- merge(
  prov_area,
  aree,
  by = "AREA",
  suffixes = c("", "_TOT")
)

prov_area$PERCENTUALE_AREA <- prov_area$POP_AREA / prov_area$POP_AREA_TOT

# Calcolo popolazione nazionale
popolazione <- sum(province$POP_2011)

```

```{r collegi}

prepara_collegi <- function(ramo) {
  if (ramo == "camera") {
    colonna_circ <- base_dati$CIRCOCAM_20_DEN
    colonna_pluri <- base_dati$CP20_DEN
    colonna_uni <- base_dati$CU20_DEN
  }
  
  if (ramo == "senato") {
    colonna_circ <- base_dati$DEN_REG20
    colonna_pluri <- base_dati$SP20_DEN
    colonna_uni <- base_dati$SU20_DEN
  }
  
  dati <- list()
  
  # Estraggo le circoscrizioni
  dati$circoscrizioni <- aggregate(
    POP_2011 ~ CIRCOCAM_20_DEN,
    base_dati,
    sum
  )
  
  # Estraggo i collegi plurinominali
  dati$collegi_pluri <- aggregate(
    POP_2011 ~ CIRCOCAM_20_DEN + CP20_DEN,
    base_dati,
    sum
  )
  
  # Controllo che non ci siano collegi plurinominali duplicati
  if (sum(duplicated(dati$collegi_pluri$CP20_DEN)) > 0) warning(
    "Collegi plurinominali duplicati"
  )
  
  dati$collegi_uni <- aggregate(
    POP_2011 ~ CIRCOCAM_20_DEN + CP20_DEN + CU20_DEN,
    base_dati,
    sum
  )
  
  # Controllo che non ci siano collegi uninominali duplicati
  if (sum(duplicated(dati$collegi_uni$CU20_DEN)) > 0) warning(
    "Collegi plurinominali duplicati"
  )
  
  ##### Rinomino le colonne ####
  names(dati$circoscrizioni)[1] <- "CIRCOSCRIZIONE"
  names(dati$collegi_pluri)[1] <- "CIRCOSCRIZIONE"
  names(dati$collegi_pluri)[2] <- "COLLEGIOPLURINOMINALE"
  names(dati$collegi_uni)[1] <- "CIRCOSCRIZIONE"
  names(dati$collegi_uni)[2] <- "COLLEGIOPLURINOMINALE"
  names(dati$collegi_uni)[3] <- "COLLEGIOUNINOMINALE"
  
  # Carico i collegi
  dati$collegi_pluri <- merge(
    dati$collegi_pluri,
    read_xlsx("dati/2022/collegi.xlsx", paste0(ramo, "_pluri"))
  )
  
  dati
}

# Preparo le liste
camera <- prepara_collegi("camera")
senato <- prepara_collegi("senato")


```


```{r dati}
#| include: false
#| cache: true

# Importo liste_naz

liste_naz <- read_xlsx("dati/2022/liste.xlsx", "liste")
altri_dati <- read_xlsx("dati/2022/liste.xlsx", "altri_dati")

carica_dati <- function(ramo) {
  uni <- read.csv(
    paste0(
      "dati/2022/",
      toupper(ramo),
      "_ITALIA_20220925_uni.csv"
    )
  )
  pluri <- read.csv(
    paste0(
      "dati/2022/",
      toupper(ramo),
      "_ITALIA_20220925_pluri.csv"
    )
  )
  
  names(uni)[2:3] <- c("COLLEGIOUNINOMINALE", "LISTA")
  names(pluri)[2:3] <- c("COLLEGIOPLURINOMINALE", "LISTA") 
  
  # Correggo la scrittura del SÜDTIROL
  uni$CIRCOSCRIZIONE <- 
    str_replace(uni$CIRCOSCRIZIONE, "S\\?DTIROL", "SÜDTIROL")
  uni$COLLEGIOUNINOMINALE <- 
    str_replace(uni$COLLEGIOUNINOMINALE, "S\\?DTIROL", "SÜDTIROL")
  pluri$CIRCOSCRIZIONE <- 
    str_replace(pluri$CIRCOSCRIZIONE, "S\\?DTIROL", "SÜDTIROL")
  pluri$COLLEGIOPLURINOMINALE <- 
    str_replace(pluri$COLLEGIOPLURINOMINALE, "S\\?DTIROL", "SÜDTIROL")
  
  # Correggo la circoscrizione "ITALIA"
  sost_circ <- function(stringa) {
    substr(stringa, 1, str_length(stringa) - 6)
  }
  
  uni$CIRCOSCRIZIONE[uni$CIRCOSCRIZIONE == "ITALIA"] <- 
    sapply(uni$COLLEGIOUNINOMINALE[uni$CIRCOSCRIZIONE == "ITALIA"], sost_circ)
  
  # Aggiungo i numeri dei candidati
  pluri$NUMERO <- ave(
    seq_along(pluri$CANDIDATO),
    paste(pluri$COLLEGIOPLURINOMINALE, pluri$LISTA),
    FUN = seq_along
  )
  
  # Tolgo i candidati di liste non considerate
  uni <- uni[uni$LISTA %in% liste_naz$LISTA, ]
  pluri <- pluri[pluri$LISTA %in% liste_naz$LISTA, ]
  
  # Aggiungo la colonna collegio plurinominale
  uni <- merge(
    uni,
    get(ramo)$collegi_uni[, c("COLLEGIOPLURINOMINALE", "COLLEGIOUNINOMINALE")]
  )
  
  list(candidati_uni = uni, candidati_pluri = pluri)
}

camera <- c(camera, carica_dati("camera"))
senato <- c(senato, carica_dati("senato"))

# Check per controllare che i nomi corrispondano
setdiff(camera$candidati_uni$CIRCOSCRIZIONE, base_dati$CIRCOCAM_20_DEN)
setdiff(base_dati$CIRCOCAM_20_DEN, camera$candidati_uni$CIRCOSCRIZIONE)

setdiff(camera$candidati_pluri$CIRCOSCRIZIONE, base_dati$CIRCOCAM_20_DEN)
setdiff(base_dati$CIRCOCAM_20_DEN, camera$candidati_pluri$CIRCOSCRIZIONE)

setdiff(senato$candidati_uni$CIRCOSCRIZIONE, base_dati$DEN_REG20)
setdiff(base_dati$DEN_REG20, senato$candidati_uni$CIRCOSCRIZIONE)

setdiff(senato$candidati_pluri$CIRCOSCRIZIONE, base_dati$DEN_REG20)
setdiff(base_dati$DEN_REG20, senato$candidati_pluri$CIRCOSCRIZIONE)



setdiff(camera$candidati_uni$COLLEGIOUNINOMINALE, base_dati$CU20_DEN)
setdiff(base_dati$CU20_DEN, camera$candidati_uni$COLLEGIOUNINOMINALE)

setdiff(camera$candidati_pluri$COLLEGIOPLURINOMINALE, base_dati$CP20_DEN)
setdiff(base_dati$CP20_DEN, camera$candidati_pluri$COLLEGIOPLURINOMINALE)

setdiff(senato$candidati_uni$COLLEGIOUNINOMINALE, base_dati$SU20_DEN)
setdiff(base_dati$SU20_DEN, senato$candidati_uni$COLLEGIOUNINOMINALE)

setdiff(senato$candidati_pluri$COLLEGIOPLURINOMINALE, base_dati$SP20_DEN)
setdiff(base_dati$SP20_DEN, senato$candidati_pluri$COLLEGIOPLURINOMINALE)


```


```{r simula}
#| include: false
#| cache: true

#### Calcolo percentuali per provincia ####

liste_naz$PERC_CORRETTA <-liste_naz$PERCENTUALE * (1 - altri_dati$Astensione) 
liste_naz <- merge(
  liste_naz,
  data.frame(
    AREA = "astensione",
    PERC_CORRETTA = altri_dati$Astensione
  ),
  all = TRUE
)

aree <- merge(
  aree,
  aggregate(
    PERC_CORRETTA ~ AREA,
    liste_naz,
    sum
  )
)

names(aree)[names(aree) == "PERC_CORRETTA"] <- "PERCENTUALE"

aree$VOTANTI <- aree$PERCENTUALE * popolazione

prov_area <- merge(
  prov_area,
  aree[,c("AREA", "VOTANTI")]
)

prov_area$VOTANTI_LOCALI <- prov_area$VOTANTI * prov_area$PERCENTUALE_AREA

prov_area <- merge(
  prov_area,
  aggregate(
    VOTANTI_LOCALI ~ PROVINCIA,
    prov_area,
    sum
  ),
  by = "PROVINCIA",
  suffixes = c("", "_TOT")
)

prov_area$PERCENTUALE <- prov_area$VOTANTI_LOCALI / prov_area$VOTANTI_LOCALI_TOT

comuni_aree <- merge(
  base_dati,
  aree[c("AREA", "PERCENTUALE")]
)

comuni_aree <- merge(
  comuni_aree,
  prov_area[, c("PROVINCIA", "AREA", "PERCENTUALE")],
  all.x = TRUE,
  by = c("PROVINCIA", "AREA"),
  suffixes = c("", "_PROV")
)

comuni_aree$PERCENTUALE[!is.na(comuni_aree$PERCENTUALE_PROV)] <-
  comuni_aree$PERCENTUALE_PROV[!is.na(comuni_aree$PERCENTUALE_PROV)]

comuni_aree$VOTANTI <- 
  comuni_aree$POP_2011 * comuni_aree$PERCENTUALE

camera$aree_uni <- aggregate(
  cbind(VOTANTI, POP_2011) ~ CIRCOCAM_20_DEN + CP20_DEN + CU20_DEN + AREA,
  comuni_aree,
  sum
)

names(camera$aree_uni)[1] <- "CIRCOSCRIZIONE"
names(camera$aree_uni)[2] <- "COLLEGIOPLURINOMINALE"
names(camera$aree_uni)[3] <- "COLLEGIOUNINOMINALE"

senato$aree_uni <- aggregate(
  cbind(VOTANTI, POP_2011) ~ DEN_REG20 + SP20_DEN + SU20_DEN + AREA,
  comuni_aree,
  sum
)

names(senato$aree_uni)[1] <- "CIRCOSCRIZIONE"
names(senato$aree_uni)[2] <- "COLLEGIOPLURINOMINALE"
names(senato$aree_uni)[3] <- "COLLEGIOUNINOMINALE"

liste_naz <- merge(
  liste_naz,
  aree[, c("AREA", "PERCENTUALE")],
  by = "AREA",
  suffixes = c("", "_AREA")
)

liste_naz$PERC_IN_AREA <- liste_naz$PERC_CORRETTA / liste_naz$PERCENTUALE_AREA


simula <- function(
    ramo,
    dati,
    iterazioni = 200,
    variab = .5
) {
  
  #### Calcolo il numero massimo di candidati per collegio pluri ####
  dati$collegi_pluri$CANDIDATI_MAX <- 
    pmin(4, dati$collegi_pluri$SEGGI)
  if (ramo == "Senato") {
    dati$collegi_pluri$CANDIDATI_MAX[dati$collegi_pluri$SEGGI == 1] <- 1
  }
  
  #### Preparo i data frame delle liste ai diversi livelli ####
  
  dati$liste_circ <- merge(
    dati$circoscrizioni,
    liste_naz[, c("LISTA", "PERCENTUALE")]
  )
  
  dati$liste_pluri <- merge(
    dati$collegi_pluri,
    dati$liste_circ[, c("CIRCOSCRIZIONE", "LISTA")]
  )
  
  dati$liste_uni <- merge(
    dati$collegi_uni,
    liste_naz[, c("LISTA", "CL", "AREA", "PERC_IN_AREA")]
  )
  
  dati$liste_uni <- merge(
    dati$liste_uni,
    dati$aree_uni[, c(
      "CIRCOSCRIZIONE",
      "COLLEGIOUNINOMINALE",
      "COLLEGIOPLURINOMINALE",
      "AREA",
      "VOTANTI"
    )]
  )
  
  dati$liste_uni$VOTANTI_LISTA_BASE <- 
    dati$liste_uni$VOTANTI * dati$liste_uni$PERC_IN_AREA
  
  dati$liste_uni <- merge(
    dati$liste_uni,
    aggregate(
      VOTANTI_LISTA_BASE ~ 
        CIRCOSCRIZIONE + COLLEGIOPLURINOMINALE + COLLEGIOUNINOMINALE,
      dati$liste_uni,
      sum
    ),
    by = c("CIRCOSCRIZIONE", "COLLEGIOPLURINOMINALE", "COLLEGIOUNINOMINALE"),
    suffixes = c("", "_TOT")
  )
  
  dati$liste_uni$PERC_LISTA_BASE <- 
    dati$liste_uni$VOTANTI_LISTA_BASE / dati$liste_uni$VOTANTI_LISTA_BASE_TOT
  
  dati$liste_uni$LOG_PERC_LISTA_BASE <- log(dati$liste_uni$PERC_LISTA_BASE)
  
  dati$liste_uni$CAND_MINORANZA <- FALSE
  dati$liste_uni$MINORANZA <- FALSE
  
  liste_naz <- liste_naz[!is.na(liste_naz$LISTA), ]
  
  
  #### Preparo il data frame dei candidati ####
  n_cand <- sum(dati$collegi_pluri$CANDIDATI_MAX) + nrow(dati$collegi_uni)
  dati$candidati <- data.frame(
    LISTA = rep(liste_naz$LISTA, each = n_cand),
    CL = rep(liste_naz$CL, each = n_cand)
  )
  
  dati$candidati$CANDIDATO <- 
    factor(paste(dati$candidati$LISTA, seq_along(dati$candidati$LISTA)))
  
  #### Inizio iterazioni ####
  
  iterazione <- function(
    iter = 1,
    ramo = "Camera",
    dati,
    variab = .5
  ) {
    dati$liste_uni$LOG_P <- rnorm(
      dati$liste_uni$LOG_PERC_LISTA_BASE,
      dati$liste_uni$LOG_PERC_LISTA_BASE,
      variab
    )
    
    dati$liste_uni$PERCENTUALE_UNI <- ave(
      dati$liste_uni$LOG_P,
      paste(
        dati$liste_uni$CIRCOSCRIZIONE,
        dati$liste_uni$COLLEGIOPLURINOMINALE,
        dati$liste_uni$COLLEGIOUNINOMINALE
      ),
      FUN = function(x) exp(x) / sum(exp(x))
    )
    
    dati$liste_uni$VOTI_LISTA <- 
      dati$liste_uni$POP_2011 * dati$liste_uni$PERCENTUALE_UNI
    
    dati$liste_uni <- dati$liste_uni[!is.na(dati$liste_uni$LISTA), ]
    dati$liste_pluri <- dati$liste_pluri[!is.na(dati$liste_pluri$LISTA), ]
    dati$liste_circ <- dati$liste_circ[!is.na(dati$liste_circ$LISTA), ]
    
    ##### Sorteggio i candidati ####
    
    dati$candidati_uni <- unique(dati$liste_uni[, c(
      "CIRCOSCRIZIONE",
      "COLLEGIOPLURINOMINALE",
      "COLLEGIOUNINOMINALE",
      "CL"
    )])
    
    dati$candidati$SCELTO_UNI <- FALSE
    dati$candidati_uni$CANDIDATO <- 
      factor(NA, levels = levels(dati$candidati$CANDIDATO))
    
    
    for (i in seq_along(dati$candidati_uni$CL)) {
      lista <- sample(
        liste_naz$LISTA[liste_naz$CL == dati$candidati_uni$CL[i]], 
        1, 
        prob = liste_naz$FRAZ_UNI[liste_naz$CL == dati$candidati_uni$CL[i]]
      )
      candidato <- sample(which(
        dati$candidati$LISTA == lista &
          !dati$candidati$SCELTO_UNI
      ), 1)
      
      dati$candidati_uni$CANDIDATO[i] <- dati$candidati$CANDIDATO[candidato]
      dati$candidati$SCELTO_UNI[candidato] <- TRUE
    }
    
    if (sum(duplicated(dati$candidati_uni$CANDIDATO)) > 0) stop(
      "Candidati uninominali duplicati"
    )
    
    
    dati$candidati_pluri <- dati$liste_pluri[
      rep(
        seq_along(dati$liste_pluri$CANDIDATI_MAX), 
        dati$liste_pluri$CANDIDATI_MAX
      ),
      c(
        "CIRCOSCRIZIONE",
        "COLLEGIOPLURINOMINALE",
        "LISTA"
      )
    ]
    
    dati$candidati_pluri$NUMERO <- ave(
      seq_along(dati$candidati_pluri$LISTA),
      paste(
        dati$candidati_pluri$CIRCOSCRIZIONE,
        dati$candidati_pluri$COLLEGIOPLURINOMINALE,
        dati$candidati_pluri$LISTA
      ),
      FUN = seq_along
    )
    
    dati$candidati$SCELTO_PLURI <- 0
    dati$candidati_pluri$CANDIDATO <- 
      factor(NA, levels = levels(dati$candidati$CANDIDATO))
    
    for (i in seq_along(dati$candidati_pluri$NUMERO)) {
      if (runif(1) < liste_naz$FRAZ_PLURICAND[
        liste_naz$LISTA == dati$candidati_pluri$LISTA[i]
      ]) {
        papabili <- which(
          dati$candidati$LISTA == dati$candidati_pluri$LISTA[i] &
            dati$candidati$SCELTO_PLURI < 5 &
            (dati$candidati$SCELTO_UNI | dati$candidati$SCELTO_PLURI > 0) &
            !(dati$candidati$CANDIDATO %in% dati$candidati_pluri$CANDIDATO[
              dati$candidati_pluri$COLLEGIOPLURINOMINALE == 
                dati$candidati_pluri$COLLEGIOPLURINOMINALE[i]
            ])
        )
        
        if (length(papabili) > 0) {
          candidato <- sample(papabili, 1)
          
          dati$candidati_pluri$CANDIDATO[i] <- dati$candidati$CANDIDATO[candidato]
          dati$candidati$SCELTO_PLURI[candidato] <- 
            dati$candidati$SCELTO_PLURI[candidato] + 1
          
          next
        }
      }
      
      candidato <- which(
        dati$candidati$LISTA == dati$candidati_pluri$LISTA[i] &
          dati$candidati$SCELTO_PLURI == 0 &
          !dati$candidati$SCELTO_UNI
      )[1]
      
      dati$candidati_pluri$CANDIDATO[i] <- dati$candidati$CANDIDATO[candidato]
      dati$candidati$SCELTO_PLURI[candidato] <- 1
    }
    
    
    ##### Preparo i data frame per lo scrutinio ####
    dati$liste_uni$CANDIDATO <- NULL
    dati$liste_uni <- merge(
      dati$liste_uni,
      dati$candidati_uni
    )
    
    
    dati$candidati_uni <- merge(
      dati$candidati_uni,
      aggregate(
        VOTI_LISTA ~ 
          CIRCOSCRIZIONE + COLLEGIOPLURINOMINALE + COLLEGIOUNINOMINALE + CANDIDATO,
        dati$liste_uni,
        sum
      )
    )
    names(dati$candidati_uni)[names(dati$candidati_uni) == "VOTI_LISTA"] <-
      "VOTI_CANDIDATO"
    
    dati$candidati_uni$DATA_NASCITA <- as.POSIXct("1990-01-01")
    
    scrutinio <- Scrutinio(
      ramo,
      dati$liste_uni[, c(
        "CIRCOSCRIZIONE",
        "COLLEGIOPLURINOMINALE",
        "COLLEGIOUNINOMINALE",
        "CANDIDATO",
        "CAND_MINORANZA",
        "LISTA",
        "MINORANZA",
        "VOTI_LISTA"
      )],
      liste_naz[, c(
        "LISTA",
        "COALIZIONE",
        "MINORANZA"
      )],
      dati$candidati_uni[, c(
        "CIRCOSCRIZIONE",
        "COLLEGIOPLURINOMINALE",
        "COLLEGIOUNINOMINALE",
        "CANDIDATO",
        "DATA_NASCITA",
        "VOTI_CANDIDATO"
      )],
      dati$candidati_pluri[, c(
        "CIRCOSCRIZIONE",
        "COLLEGIOPLURINOMINALE",
        "LISTA",
        "NUMERO",
        "CANDIDATO"
      )],
      dati$collegi_pluri[, c(
        "CIRCOSCRIZIONE",
        "COLLEGIOPLURINOMINALE",
        "SEGGI"
      )],
      ifelse(ramo == "Camera", 392, 196)
    )
    
    
    scrutinio$liste_pluri <- merge(
      scrutinio$liste_pluri,
      aggregate(
        VOTI_LISTA ~ CIRCOSCRIZIONE + COLLEGIOPLURINOMINALE + LISTA,
        dati$liste_uni,
        sum
      )
    )
    
    scrutinio$liste_pluri <- merge(
      scrutinio$liste_pluri,
      aggregate(
        VOTI_LISTA ~ CIRCOSCRIZIONE + COLLEGIOPLURINOMINALE,
        scrutinio$liste_pluri,
        sum
      ),
      by = c("CIRCOSCRIZIONE", "COLLEGIOPLURINOMINALE"),
      suffixes = c("", "_TOT")
    )
    
    scrutinio$liste_pluri$PERCENTUALE <-
      scrutinio$liste_pluri$VOTI_LISTA / scrutinio$liste_pluri$VOTI_LISTA_TOT
    
    scrutinio$liste_naz <- aggregate(
      VOTI_LISTA ~ LISTA,
      scrutinio$liste_pluri,
      sum
    )
    
    scrutinio$liste_naz$PERCENTUALE <- 
      scrutinio$liste_naz$VOTI_LISTA / sum(scrutinio$liste_naz$VOTI_LISTA)
    
    scrutinio$liste_naz <- merge(
      scrutinio$liste_naz,
      aggregate(
        ELETTI ~ LISTA,
        scrutinio$liste_pluri,
        sum
      )
    )
    
    scrutinio$liste_naz <- merge(
      scrutinio$liste_naz,
      liste_naz[, c("LISTA", "CL")]
    )
    
    scrutinio$candidati_uni <- merge(
      scrutinio$candidati_uni,
      dati$candidati_uni[, c("CANDIDATO", "CL")]
    )
    
    scrutinio$cl_naz <- aggregate(
      VOTI_LISTA ~ CL,
      scrutinio$liste_naz,
      sum
    )
    
    scrutinio$cl_naz$PERCENTUALE <- 
      scrutinio$cl_naz$VOTI_LISTA / sum(scrutinio$cl_naz$VOTI_LISTA)
    
    scrutinio$cl_naz <- merge(
      scrutinio$cl_naz,
      aggregate(
        ELETTI ~ CL,
        scrutinio$liste_naz,
        sum
      )
    )
    
    scrutinio$cl_naz <- merge(
      scrutinio$cl_naz,
      aggregate(
        ELETTO ~ CL,
        scrutinio$candidati_uni,
        sum
      )
    )
    
    scrutinio$cl_naz$ELETTI_TOT <- 
      scrutinio$cl_naz$ELETTI + scrutinio$cl_naz$ELETTO
    
    scrutinio$cl_naz <- scrutinio$cl_naz[order(
      scrutinio$cl_naz$CL
    ), ]
    
    list(
      liste_pluri = scrutinio$liste_pluri,
      liste_naz = scrutinio$liste_naz,
      cl_naz = scrutinio$cl_naz,
      candidati_uni = scrutinio$candidati_uni
    )
  }
  
  cl <- makeCluster(parallel::detectCores())
  
  clusterEvalQ(
    cl,
    source("scrutinio.R")
  )
  
  lista_risultati <- parLapply(
    cl,
    seq_len(iterazioni),
    iterazione,
    ramo = ramo,
    dati = dati,
    liste_naz = liste_naz,
    variab = variab
  )
  
  stopCluster(cl)
  
  risultato <- list()
  
  risultato$liste_pluri <- 
    rbindlist(lapply(lista_risultati, function(l) l$liste_pluri), idcol = "SIM")
  risultato$liste_naz <- 
    rbindlist(lapply(lista_risultati, function(l) l$liste_naz), idcol = "SIM")
  risultato$cl_naz <- 
    rbindlist(lapply(lista_risultati, function(l) l$cl_naz), idcol = "SIM")
  risultato$candidati_uni <- 
    rbindlist(lapply(lista_risultati, function(l) l$candidati_uni), idcol = "SIM")
  
  lista_risultati <- NULL
  
  risultato
}

camera$risultato <- simula(
  "Camera",
  scenario,
  camera,
  liste_naz,
  iterazioni,
  variab
)

senato$risultato <- simula(
  "Senato",
  scenario,
  senato,
  liste_naz,
  iterazioni,
  variab
)
```


